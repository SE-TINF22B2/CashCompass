var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.522,1,2.058]],["body/controllers/AppController.html",[0,2.189,1,2.959,2,1.665,3,0.404,4,0.354,5,0.354,6,2.927,7,0.693,8,1.832,9,5.478,10,4.563,11,2.189,12,0.033,13,4.617,14,1.194,15,3.513,16,1.832,17,4.617,18,1.665,19,3.846,20,1.584,21,3.513,22,0.531,23,0.832,24,2.686,25,2.927,26,0.404,27,0.018,28,2.252,29,1.83,30,1.832,31,3.513,32,3.513,33,3.513,34,0.024,35,0.024]],["title/modules/AppModule.html",[36,1.274,37,2.058]],["body/modules/AppModule.html",[1,3.017,2,1.94,3,0.338,4,0.296,5,0.296,12,0.033,22,0.667,23,0.696,24,2.886,25,2.448,26,0.338,27,0.015,34,0.021,35,0.021,36,1.868,37,3.896,38,1.393,39,1.393,40,1.691,41,1.691,42,1.393,43,2.708,44,1.691,45,2.448,46,2.448,47,2.448,48,3.188,49,3.188,50,3.188,51,2.354,52,1.691,53,1.691,54,2.939,55,3.408,56,2.939,57,2.939,58,1.691,59,1.393,60,1.531,61,1.691,62,2.939,63,2.939,64,2.939,65,1.531,66,2.939,67,2.939,68,4.091,69,3.408,70,2.939]],["title/injectables/AppService.html",[24,1.672,71,0.76]],["body/injectables/AppService.html",[3,0.478,4,0.419,5,0.419,7,0.82,8,2.04,10,4.856,12,0.032,14,1.075,16,1.649,20,1.579,22,0.478,23,0.984,24,2.677,26,0.478,27,0.021,30,1.649,34,0.026,35,0.026,71,1.217,72,1.8,73,3.462,74,4.156,75,4.156,76,4.156]],["title/controllers/AuthController.html",[0,1.522,77,2.058]],["body/controllers/AuthController.html",[0,1.113,2,1.113,3,0.27,4,0.237,5,0.237,7,0.463,8,1.381,11,2.176,12,0.033,14,1.187,16,1.821,22,0.564,23,0.556,26,0.27,27,0.012,28,1.504,29,1.222,30,1.646,34,0.018,35,0.018,77,2.231,78,1.955,79,1.955,80,3.544,81,2.954,82,3.481,83,2.9,84,2.9,85,2.347,86,2.347,87,2.347,88,2.347,89,2.347,90,1.967,91,1.646,92,1.646,93,4.149,94,1.697,95,1.955,96,3.058,97,2.347,98,2.347,99,1.073,100,3.142,101,1.955,102,3.481,103,2.347,104,1.955,105,2.347,106,2.347,107,2.9,108,1.955,109,1.955,110,2.161,111,1.955,112,1.955,113,1.351,114,1.504,115,2.347,116,2.347,117,2.347,118,2.347,119,2.347,120,2.347,121,2.347,122,2.347,123,2.347,124,2.347,125,3.481,126,2.347,127,2.347,128,2.347,129,2.347,130,1.955,131,2.347,132,2.347,133,1.697,134,2.347,135,2.347,136,2.347,137,1.955,138,2.347,139,1.955,140,1.017,141,0.662,142,2.347,143,4.589,144,1.697,145,2.231,146,2.347,147,1.697,148,3,149,1.955,150,2.347,151,1.955]],["title/classes/AuthDto.html",[27,0.016,96,1.847]],["body/classes/AuthDto.html",[3,0.446,4,0.391,5,0.391,7,0.764,11,2.332,12,0.032,14,1.273,20,1.746,22,0.446,26,0.446,27,0.025,34,0.025,35,0.025,96,2.831,99,1.273,152,1.538,153,3.229,154,2.332,155,2.341,156,4.503,157,3.876,158,3.876,159,3.876,160,3.876,161,4.098,162,4.503,163,4.098,164,2.803]],["title/modules/AuthModule.html",[36,1.274,48,1.847]],["body/modules/AuthModule.html",[2,2.121,3,0.385,4,0.338,5,0.338,12,0.033,22,0.645,23,0.793,26,0.385,27,0.017,34,0.023,35,0.023,36,1.999,38,1.588,39,1.588,40,1.927,41,1.927,42,1.588,43,2.898,44,1.927,48,3.519,51,2.574,52,1.927,53,1.927,55,2.79,77,3.229,110,3.001,111,2.79,165,2.79,166,2.79,167,3.316,168,3.316,169,3.349,170,3.349,171,3.349,172,3.349,173,2.422,174,3.349]],["title/injectables/AuthService.html",[71,0.76,110,1.672]],["body/injectables/AuthService.html",[3,0.097,4,0.085,5,0.085,7,0.167,8,0.596,12,0.033,14,0.93,16,1.784,18,0.96,20,1.656,22,0.437,23,0.2,26,0.097,27,0.004,29,1.055,30,1.339,34,0.008,35,0.008,58,0.486,59,0.96,65,0.44,71,0.355,72,0.366,80,2.252,81,2.908,83,1.25,84,1.25,90,1.705,91,1.428,92,1.428,95,1.25,96,2.183,99,0.93,100,2.432,101,1.25,107,2.045,110,1.278,133,3.391,140,1.785,141,1.666,144,0.611,145,2.432,147,0.611,148,1.465,149,0.704,151,2.594,155,1.718,156,2.342,173,0.611,175,0.704,176,2.743,177,2.997,178,1.501,179,2.432,180,2.025,181,1.501,182,1.501,183,1.501,184,1.501,185,0.711,186,0.704,187,2.439,188,1.775,189,1.573,190,3.597,191,0.844,192,3.114,193,1.501,194,1.501,195,1.501,196,1.501,197,1.501,198,4.992,199,1.501,200,1.501,201,3.597,202,1.501,203,0.844,204,2.594,205,0.844,206,2.454,207,4.304,208,0.844,209,2.812,210,4.522,211,1.501,212,1.501,213,0.844,214,1.501,215,2.025,216,3.114,217,1.501,218,0.844,219,4.853,220,2.601,221,2.454,222,2.812,223,4.992,224,1.501,225,0.844,226,2.454,227,0.844,228,2.454,229,2.454,230,2.454,231,1.501,232,0.844,233,1.501,234,2.025,235,0.711,236,1.501,237,0.844,238,0.844,239,2.812,240,0.844,241,0.704,242,1.501,243,0.844,244,0.704,245,0.704,246,0.611,247,0.844,248,3.548,249,3.373,250,0.844,251,1.501,252,0.844,253,0.844,254,0.844,255,1.501,256,0.844,257,0.844,258,0.704,259,0.844,260,1.501,261,1.501,262,1.775,263,1.501,264,2.454,265,2.454,266,2.025,267,2.025,268,0.844,269,0.844,270,0.844,271,0.844,272,0.844,273,0.844,274,0.844,275,0.704,276,0.704,277,2.025,278,0.844,279,0.844,280,0.844,281,0.844,282,0.844,283,0.844,284,0.844,285,0.844,286,0.844,287,0.844,288,0.611,289,0.844,290,0.844]],["title/classes/CreateMockEntityDto.html",[27,0.016,291,1.672]],["body/classes/CreateMockEntityDto.html",[3,0.425,4,0.373,5,0.373,7,0.728,11,2.261,12,0.032,14,1.234,20,1.715,22,0.425,26,0.425,27,0.024,34,0.025,35,0.025,60,2.752,91,2.097,99,1.234,152,1.466,154,2.261,155,2.289,161,3.974,162,4.401,163,3.974,164,2.671,291,2.484,292,2.752,293,4.401,294,2.671,295,3.693,296,3.693,297,3.693,298,3.693,299,3.693,300,3.693]],["title/injectables/GoogleOauthGuard.html",[71,0.76,114,2.058]],["body/injectables/GoogleOauthGuard.html",[3,0.5,4,0.438,5,0.438,12,0.032,22,0.608,23,1.029,26,0.5,27,0.022,34,0.027,35,0.027,71,1.251,72,1.882,114,3.385,301,3.619,302,3.619,303,2.504,304,5.281,305,3.619,306,2.5]],["title/injectables/GoogleStrategy.html",[71,0.76,167,1.847]],["body/injectables/GoogleStrategy.html",[3,0.316,4,0.277,5,0.277,7,0.541,8,1.547,12,0.033,14,1.008,16,1.088,20,1.664,22,0.568,23,0.65,26,0.316,27,0.014,34,0.02,35,0.02,65,1.428,71,0.923,72,1.188,81,2.609,90,1.848,91,1.959,92,1.547,99,1.008,140,1.688,141,1.099,155,1.688,167,2.243,185,1.3,189,3.473,210,3.247,220,3.57,235,1.848,303,1.848,306,1.578,307,2.285,308,3.247,309,3.777,310,2.742,311,2.742,312,2.742,313,4.534,314,5.215,315,4.534,316,4.937,317,2.742,318,3.897,319,2.742,320,2.742,321,2.285,322,2.285,323,1.983,324,2.285,325,2.742,326,1.983,327,2.742,328,2.742,329,2.742,330,2.742,331,2.742,332,2.742,333,2.742,334,2.742,335,2.742,336,2.742,337,2.742,338,2.742,339,2.742,340,2.742,341,2.742,342,2.742,343,2.742]],["title/classes/JwtGuard.html",[27,0.016,344,2.058]],["body/classes/JwtGuard.html",[3,0.495,4,0.434,5,0.434,12,0.032,14,1.113,22,0.495,26,0.495,27,0.021,34,0.027,35,0.027,152,1.707,185,2.686,303,2.488,305,3.583,306,2.475,326,3.11,344,3.365,345,3.583,346,5.249,347,4.301]],["title/injectables/JwtStrategy.html",[71,0.76,168,1.847]],["body/injectables/JwtStrategy.html",[3,0.334,4,0.292,5,0.292,7,0.572,8,1.608,12,0.033,14,1.048,16,1.15,18,1.374,20,0.89,22,0.613,23,0.687,26,0.334,27,0.014,29,1.51,30,1.15,34,0.021,35,0.021,58,1.668,59,2.399,65,1.51,71,0.96,72,1.256,81,2.689,90,1.921,91,1.608,92,1.608,94,2.096,99,1.309,140,1.256,141,1.143,145,1.858,155,1.256,168,2.332,179,1.858,185,1.921,187,3.659,188,2.931,189,3.243,235,1.374,258,2.415,275,2.415,276,2.415,303,1.921,306,1.668,308,3.376,309,3.376,321,2.415,322,2.415,323,2.096,326,2.096,348,2.415,349,3.893,350,2.415,351,2.899,352,4.053,353,3.376,354,2.899,355,2.899,356,2.899,357,2.899,358,2.899,359,2.899,360,2.899,361,2.899,362,2.415]],["title/modules/MailModule.html",[36,1.274,49,1.847]],["body/modules/MailModule.html",[3,0.452,4,0.396,5,0.396,12,0.032,22,0.571,23,0.931,26,0.452,27,0.02,34,0.026,35,0.026,36,2.158,38,1.863,39,1.863,40,2.261,41,2.261,42,1.863,43,3.13,44,2.261,49,3.462,51,2.855,52,2.261,53,2.261,363,3.273,364,3.273,365,2.853,366,3.929,367,3.929]],["title/injectables/MailService.html",[71,0.76,365,1.522]],["body/injectables/MailService.html",[3,0.458,4,0.285,5,0.285,7,0.557,8,1.579,12,0.033,14,1.192,16,1.12,19,2.352,20,1.415,22,0.53,23,0.669,26,0.325,27,0.014,28,1.81,29,1.47,30,1.579,34,0.02,35,0.02,65,1.47,71,0.942,72,1.223,80,2.042,81,2.651,90,1.886,91,1.579,92,1.579,94,2.042,99,1.192,140,1.723,141,0.796,144,2.042,145,1.81,147,2.042,148,2.042,154,1.886,155,1.223,177,2.352,179,2.953,185,1.338,188,2.877,189,3.206,207,2.352,350,2.352,365,1.886,368,2.352,369,4.606,370,3.314,371,3.978,372,3.314,373,2.823,374,3.314,375,3.978,376,3.314,377,2.823,378,2.823,379,2.823,380,3.978,381,2.823,382,2.823,383,2.823,384,2.823,385,3.978,386,2.823,387,2.823,388,3.978,389,2.823,390,2.823,391,2.823,392,2.823]],["title/classes/MockEntity.html",[27,0.016,393,1.522]],["body/classes/MockEntity.html",[3,0.463,4,0.406,5,0.406,12,0.033,22,0.579,26,0.663,27,0.025,34,0.026,35,0.026,140,1.742,141,1.625,152,1.595,303,2.387,393,2.731,394,2.094,395,2.577,396,4.194,397,3.349,398,4.194,399,3.349,400,2.907,401,2.577]],["title/classes/MockEntity-1.html",[27,0.013,393,1.279,402,2.247]],["body/classes/MockEntity-1.html",[3,0.368,4,0.323,5,0.323,7,0.631,11,2.502,12,0.033,14,1.365,18,2.502,20,1.894,22,0.368,26,0.368,27,0.016,34,0.022,35,0.022,91,1.953,92,2.094,99,1.53,113,1.841,152,1.27,154,2.057,155,2.132,235,2.333,393,2.057,394,2.873,403,2.666,404,3.559,405,3.614,406,3.2,407,3.2,408,3.614,409,3.2,410,3.2,411,4.1,412,4.1]],["title/controllers/MockEntityController.html",[0,1.522,413,2.058]],["body/controllers/MockEntityController.html",[0,0.842,2,0.842,3,0.204,4,0.179,5,0.179,7,0.35,8,1.116,11,2.282,12,0.033,14,1.245,16,1.91,18,2.437,20,1.072,22,0.575,23,0.421,26,0.204,27,0.014,29,1.464,30,1.91,34,0.014,35,0.014,60,1.464,61,2.873,69,2.342,79,1.48,90,2.179,91,1.824,92,1.824,99,1.389,100,1.139,104,2.342,108,2.342,109,1.48,112,1.48,113,1.022,141,0.984,179,1.802,185,0.842,235,2.179,248,1.48,291,2.394,292,2.6,344,1.139,362,1.48,365,1.333,370,2.342,372,1.48,374,2.342,400,1.285,413,1.802,414,1.48,415,3.489,416,2.033,417,3.304,418,2.342,419,2.811,420,2.342,421,2.906,422,1.48,423,1.777,424,3.304,425,1.777,426,1.777,427,2.811,428,1.777,429,1.48,430,1.777,431,1.777,432,1.777,433,1.777,434,1.777,435,1.777,436,1.48,437,2.811,438,1.777,439,2.811,440,1.777,441,1.48,442,2.873,443,1.777,444,1.777,445,1.777,446,3.966,447,1.817,448,1.48,449,2.811,450,3.489,451,3.966,452,1.777,453,1.48,454,1.285,455,1.777,456,1.777,457,1.777,458,1.777,459,1.777,460,3.966,461,1.777,462,1.777,463,1.777,464,1.777,465,1.777,466,1.777,467,1.777,468,1.777,469,1.777,470,1.777,471,1.777,472,1.777,473,1.777,474,1.777,475,1.777,476,1.777,477,1.777]],["title/modules/MockEntityModule.html",[36,1.274,50,1.847]],["body/modules/MockEntityModule.html",[2,2.189,3,0.404,4,0.354,5,0.354,12,0.033,22,0.63,23,0.832,26,0.404,27,0.018,34,0.024,35,0.024,36,2.047,38,1.665,39,1.665,40,2.021,41,2.021,42,1.665,43,2.968,44,2.021,50,3.476,51,2.657,52,2.021,53,2.021,60,2.405,61,2.021,292,1.83,365,2.769,413,3.306,447,3.042,448,2.927,453,2.927,478,2.927,479,2.927,480,3.513,481,3.513]],["title/injectables/MockEntityService.html",[71,0.76,447,1.672]],["body/injectables/MockEntityService.html",[3,0.279,4,0.245,5,0.245,7,0.478,8,1.416,12,0.033,14,1.344,16,1.972,18,2.666,22,0.487,23,0.575,26,0.279,27,0.012,28,1.555,30,1.972,34,0.018,35,0.018,58,1.396,59,1.15,61,3.091,71,0.845,72,1.051,90,2.356,91,1.972,92,1.972,99,1.285,100,1.555,185,1.15,186,2.021,187,3.757,235,2.463,288,2.579,291,2.706,292,2.797,416,2.579,417,3.885,418,2.972,420,2.972,421,2.972,422,2.972,429,2.972,436,2.972,441,2.972,442,3.171,447,1.858,482,2.021,483,2.426,484,2.426,485,2.426,486,2.426,487,2.426,488,2.426,489,2.426,490,2.426,491,2.426,492,2.426,493,2.426]],["title/classes/UpdateMockEntityDto.html",[27,0.016,442,1.847]],["body/classes/UpdateMockEntityDto.html",[3,0.49,4,0.43,5,0.43,12,0.032,22,0.6,26,0.49,27,0.021,34,0.027,35,0.027,60,2.717,152,1.69,246,3.08,291,2.218,292,2.218,294,3.08,303,2.473,416,3.08,442,3.002,494,3.548,495,5.217,496,4.259,497,3.548,498,4.259]],["title/classes/User.html",[27,0.016,141,0.905]],["body/classes/User.html",[3,0.463,4,0.406,5,0.406,12,0.033,22,0.579,26,0.663,27,0.025,34,0.026,35,0.026,140,1.742,141,1.673,152,1.595,303,2.387,393,2.606,394,2.094,395,2.577,396,4.194,397,3.349,398,4.194,399,3.349,400,2.907,401,2.577]],["title/classes/User-1.html",[27,0.013,141,0.761,402,2.247]],["body/classes/User-1.html",[3,0.398,4,0.349,5,0.349,7,0.682,11,2.426,12,0.033,14,1.323,18,2.58,20,1.849,22,0.398,26,0.398,27,0.017,34,0.024,35,0.024,92,1.813,99,1.504,113,1.989,141,1.288,152,1.372,154,2.166,155,2.216,204,4.262,235,2.426,394,2.835,405,3.805,408,2.88,411,4.262,412,3.805,499,2.88,500,3.457,501,3.457,502,3.457]],["title/coverage.html",[503,3.144]],["body/coverage.html",[0,2.07,1,1.643,5,0.259,6,2.135,12,0.033,24,1.335,27,0.028,34,0.019,35,0.019,42,1.215,59,1.215,60,1.934,61,2.136,71,1.294,73,2.135,77,1.643,78,2.135,96,1.475,99,0.663,110,1.335,114,1.643,133,2.685,141,1.047,153,2.135,167,1.475,168,1.475,175,2.135,262,1.853,291,1.335,292,2.493,293,2.135,294,2.685,301,2.135,302,2.135,307,2.135,344,1.643,345,2.135,348,2.135,365,1.215,368,2.135,393,1.76,394,2.646,395,2.798,401,1.643,403,2.135,413,1.643,414,2.135,442,1.475,447,1.335,454,1.853,482,2.135,494,2.135,499,2.135,503,1.853,504,2.563,505,2.563,506,2.563,507,2.685,508,2.135,509,6.269,510,5.702,511,4.365,512,3.713,513,3.713,514,5.08,515,3.713,516,2.563,517,2.563,518,2.135,519,2.135,520,2.135,521,2.563,522,2.563,523,2.563,524,2.563]],["title/dependencies.html",[39,1.826,525,2.247]],["body/dependencies.html",[12,0.033,23,0.787,27,0.025,34,0.023,35,0.023,39,1.576,58,1.912,59,2.11,65,1.731,113,1.912,164,2.403,173,2.403,220,2.403,241,2.769,244,2.769,246,2.403,306,1.912,323,3.875,324,2.769,349,2.769,376,2.769,497,2.769,526,5.017,527,3.323,528,3.323,529,3.323,530,3.323,531,3.323,532,4.45,533,3.323,534,3.323,535,3.323,536,3.323,537,3.323,538,3.323,539,3.323,540,3.323,541,3.323,542,3.323,543,2.769,544,3.323,545,3.323,546,3.323,547,3.323,548,3.323,549,3.323,550,3.323,551,3.323,552,3.323,553,3.323,554,3.323,555,3.323,556,3.323,557,3.323,558,3.323,559,3.323]],["title/miscellaneous/functions.html",[560,1.405,561,3.209]],["body/miscellaneous/functions.html",[7,0.917,12,0.028,34,0.028,35,0.028,42,2.777,507,3.362,508,4.88,520,3.873,560,2.421,561,3.873,562,4.649,563,3.873]],["title/index.html",[7,0.532,564,2.698,565,2.698]],["body/index.html",[4,0.325,12,0.032,34,0.022,35,0.022,130,2.686,137,2.686,139,2.686,176,2.331,404,3.153,503,2.331,543,4.854,566,3.224,567,3.224,568,4.36,569,3.224,570,3.224,571,3.224,572,3.224,573,3.224,574,3.224,575,4.94,576,3.224,577,3.224,578,3.224,579,4.94,580,3.224,581,3.224,582,3.224,583,5.699,584,3.224,585,3.224,586,4.36,587,3.224,588,3.224,589,3.224,590,3.224,591,4.36,592,3.224,593,3.224,594,3.224,595,4.36,596,4.36,597,3.224,598,3.224,599,3.224,600,3.224,601,3.224,602,2.686,603,3.224,604,3.224,605,3.224,606,3.224,607,3.224,608,3.224,609,3.224,610,3.224,611,2.686,612,3.224,613,3.224,614,3.224,615,3.224,616,3.224,617,3.224,618,2.686]],["title/modules.html",[38,2.061]],["body/modules.html",[12,0.028,34,0.028,35,0.028,37,2.857,38,2.113,48,2.564,49,2.564,50,2.564,602,4.974,619,5.97,620,5.97,621,5.97]],["title/overview.html",[622,3.622]],["body/overview.html",[2,1.564,12,0.032,24,2.603,34,0.023,35,0.023,36,1.309,37,3.909,38,1.564,39,1.564,40,1.898,41,1.898,42,1.564,43,1.898,44,1.898,45,2.748,46,2.748,47,2.748,48,3.472,49,3.206,50,3.372,51,2.548,52,1.898,53,1.898,72,1.429,110,2.603,152,1.309,165,2.748,166,2.748,167,2.876,168,2.876,363,2.748,364,2.748,365,2.532,447,2.603,478,2.748,479,2.748,622,2.748,623,3.298,624,3.298,625,3.298,626,3.298]],["title/properties.html",[154,1.826,525,2.247]],["body/properties.html",[12,0.032,34,0.028,35,0.028,154,2.228,176,3.398,611,3.915,618,3.915,627,4.699,628,4.699,629,4.699]],["title/miscellaneous/typealiases.html",[560,1.405,630,3.852]],["body/miscellaneous/typealiases.html",[7,0.932,12,0.029,34,0.029,35,0.029,99,1.436,245,4.626,353,3.936,560,2.461,631,4.725,632,4.725,633,4.725]],["title/miscellaneous/variables.html",[560,1.405,634,3.209]],["body/miscellaneous/variables.html",[7,0.696,12,0.033,20,1.083,30,1.837,34,0.024,35,0.024,59,2.195,99,0.912,140,2.005,141,0.995,262,2.551,288,3.348,393,1.672,394,1.837,395,2.261,401,2.967,404,2.551,424,2.938,454,3.348,507,2.551,518,2.938,519,3.857,560,1.837,563,2.938,634,2.938,635,3.527,636,3.527,637,5.167,638,5.167,639,3.527,640,4.629,641,3.527,642,3.527,643,3.527,644,3.527,645,3.527,646,3.527,647,4.629,648,3.527,649,3.527,650,3.527,651,3.527,652,3.527,653,3.527,654,3.527]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":628,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["0.13.0",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["0.2.8",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["0.22.0",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["0.31.1",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":515,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":513,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":512,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":402,"title":{"classes/MockEntity-1.html":{},"classes/User-1.html":{}},"body":{}}],["1.0.0",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["10.2.3",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["15m",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["200",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["3",{"_index":624,"title":{},"body":{"overview.html":{}}}],["3.1.1",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":623,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["5.0.0",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["6.9.7",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":625,"title":{},"body":{"overview.html":{}}}],["7.1.14",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":626,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["_accesstoken",{"_index":318,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["_gen/prisma",{"_index":452,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["_mockentity",{"_index":396,"title":{},"body":{"classes/MockEntity.html":{},"classes/User.html":{}}}],["_refreshtoken",{"_index":313,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["_user",{"_index":398,"title":{},"body":{"classes/MockEntity.html":{},"classes/User.html":{}}}],["access",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokentype",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["add",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["adress",{"_index":374,"title":{},"body":{"injectables/MailService.html":{},"controllers/MockEntityController.html":{}}}],["aliases",{"_index":631,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":603,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":449,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["apicreatedresponse",{"_index":450,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["apiokresponse",{"_index":451,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["apiproperty",{"_index":411,"title":{},"body":{"classes/MockEntity-1.html":{},"classes/User-1.html":{}}}],["apiproperty({type",{"_index":405,"title":{},"body":{"classes/MockEntity-1.html":{},"classes/User-1.html":{}}}],["apipropertyoptional",{"_index":412,"title":{},"body":{"classes/MockEntity-1.html":{},"classes/User-1.html":{}}}],["apipropertyoptional({type",{"_index":408,"title":{},"body":{"classes/MockEntity-1.html":{},"classes/User-1.html":{}}}],["apitags",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MockEntityController.html":{}}}],["apitags('auth",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('mock",{"_index":458,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["app",{"_index":581,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":574,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":37,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":24,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.hash(dto.password",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.verify",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["async",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{}}}],["auth",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["auth.controller",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorator",{"_index":455,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["auth/guard",{"_index":456,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["authcontroller",{"_index":77,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":96,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authguard",{"_index":305,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"classes/JwtGuard.html":{}}}],["authguard('google",{"_index":304,"title":{},"body":{"injectables/GoogleOauthGuard.html":{}}}],["authguard('jwt",{"_index":346,"title":{},"body":{"classes/JwtGuard.html":{}}}],["authmodule",{"_index":48,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":611,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":110,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{}}}],["back",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backers",{"_index":604,"title":{},"body":{"index.html":{}}}],["body",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MockEntityController.html":{}}}],["boolean",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":621,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":619,"title":{},"body":{"modules.html":{}}}],["building",{"_index":569,"title":{},"body":{"index.html":{}}}],["callbackurl",{"_index":331,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["cashcompass",{"_index":385,"title":{},"body":{"injectables/MailService.html":{}}}],["catch",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["class",{"_index":27,"title":{"classes/AuthDto.html":{},"classes/CreateMockEntityDto.html":{},"classes/JwtGuard.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"coverage.html":{},"dependencies.html":{}}}],["class/index.ts",{"_index":395,"title":{},"body":{"classes/MockEntity.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["class/mock_entity.ts",{"_index":403,"title":{},"body":{"classes/MockEntity-1.html":{},"coverage.html":{}}}],["class/mock_entity.ts:11",{"_index":409,"title":{},"body":{"classes/MockEntity-1.html":{}}}],["class/mock_entity.ts:14",{"_index":410,"title":{},"body":{"classes/MockEntity-1.html":{}}}],["class/mock_entity.ts:5",{"_index":407,"title":{},"body":{"classes/MockEntity-1.html":{}}}],["class/mock_entity.ts:8",{"_index":406,"title":{},"body":{"classes/MockEntity-1.html":{}}}],["class/user.ts",{"_index":499,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["class/user.ts:11",{"_index":502,"title":{},"body":{"classes/User-1.html":{}}}],["class/user.ts:5",{"_index":501,"title":{},"body":{"classes/User-1.html":{}}}],["class/user.ts:8",{"_index":500,"title":{},"body":{"classes/User-1.html":{}}}],["classes",{"_index":152,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateMockEntityDto.html":{},"classes/JwtGuard.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"overview.html":{}}}],["clientid",{"_index":327,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":329,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["cluster_appmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":363,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":364,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mockentitymodule",{"_index":478,"title":{},"body":{"modules/MockEntityModule.html":{},"overview.html":{}}}],["cluster_mockentitymodule_providers",{"_index":479,"title":{},"body":{"modules/MockEntityModule.html":{},"overview.html":{}}}],["come",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compare",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{}}}],["config.get('jwt_secret",{"_index":359,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{}}}],["configservice.get('callbackurl",{"_index":332,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('clientid",{"_index":328,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('clientsecret",{"_index":330,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configtype",{"_index":320,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["conflictexception",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('email",{"_index":387,"title":{},"body":{"injectables/MailService.html":{}}}],["console.log(error",{"_index":391,"title":{},"body":{"injectables/MailService.html":{}}}],["console.log(req.user",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["constructor(config",{"_index":350,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MailService.html":{}}}],["constructor(configservice",{"_index":310,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["constructor(prismaservice",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MockEntityService.html":{}}}],["constructor(private",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/MailService.html":{},"injectables/MockEntityService.html":{}}}],["constructor(readonly",{"_index":325,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["contains",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MockEntityController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MockEntityController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('mock",{"_index":457,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"overview.html":{}}}],["coverage",{"_index":503,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":416,"title":{},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{}}}],["create(@body",{"_index":469,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["create(createmockentitydto",{"_index":422,"title":{},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["created",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["createmockentitydto",{"_index":291,"title":{"classes/CreateMockEntityDto.html":{}},"body":{"classes/CreateMockEntityDto.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserorthrow",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserorthrow(mail",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MockEntityService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["db",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"overview.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/CreateMockEntityDto.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"classes/User-1.html":{}}}],["default",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"classes/User-1.html":{}}}],["delete",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/MockEntityController.html":{}}}],["delete(':id",{"_index":437,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["dependencies",{"_index":39,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["description",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["development",{"_index":582,"title":{},"body":{"index.html":{}}}],["disable",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["documentation",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":315,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":343,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dto",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["dto.password",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["e2e",{"_index":592,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":570,"title":{},"body":{"index.html":{}}}],["email",{"_index":155,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/MockEntity-1.html":{},"classes/User-1.html":{}}}],["emails",{"_index":334,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":338,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["empty",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["entity",{"_index":415,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["entity.controller",{"_index":481,"title":{},"body":{"modules/MockEntityModule.html":{}}}],["entity.controller.ts",{"_index":414,"title":{},"body":{"controllers/MockEntityController.html":{},"coverage.html":{}}}],["entity.controller.ts:35",{"_index":428,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["entity.controller.ts:43",{"_index":435,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["entity.controller.ts:49",{"_index":431,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["entity.controller.ts:55",{"_index":425,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["entity.controller.ts:61",{"_index":444,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["entity.controller.ts:69",{"_index":438,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["entity.controller.ts:74",{"_index":440,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["entity.dto",{"_index":498,"title":{},"body":{"classes/UpdateMockEntityDto.html":{}}}],["entity.dto.ts",{"_index":294,"title":{},"body":{"classes/CreateMockEntityDto.html":{},"classes/UpdateMockEntityDto.html":{},"coverage.html":{}}}],["entity.dto.ts:10",{"_index":298,"title":{},"body":{"classes/CreateMockEntityDto.html":{}}}],["entity.dto.ts:6",{"_index":296,"title":{},"body":{"classes/CreateMockEntityDto.html":{}}}],["entity.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["entity.module.ts",{"_index":480,"title":{},"body":{"modules/MockEntityModule.html":{}}}],["entity.service",{"_index":448,"title":{},"body":{"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{}}}],["entity.service.ts",{"_index":482,"title":{},"body":{"injectables/MockEntityService.html":{},"coverage.html":{}}}],["entity.service.ts:17",{"_index":485,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["entity.service.ts:21",{"_index":486,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["entity.service.ts:29",{"_index":488,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["entity.service.ts:38",{"_index":487,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["entity.service.ts:6",{"_index":483,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["entity.service.ts:9",{"_index":484,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["entity/dto/create",{"_index":293,"title":{},"body":{"classes/CreateMockEntityDto.html":{},"coverage.html":{}}}],["entity/dto/update",{"_index":494,"title":{},"body":{"classes/UpdateMockEntityDto.html":{},"coverage.html":{}}}],["entity/mock",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"coverage.html":{}}}],["env",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["error.code",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":392,"title":{},"body":{"injectables/MailService.html":{}}}],["eslint",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["eslint/no",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["example",{"_index":579,"title":{},"body":{"index.html":{}}}],["exception",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["executioncontext",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["exports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"overview.html":{}}}],["express",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["express.request",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":303,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MockEntity.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{}}}],["extractjwt",{"_index":355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extramodels",{"_index":401,"title":{},"body":{"classes/MockEntity.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fails",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"coverage.html":{}}}],["files",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["find",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["findall",{"_index":417,"title":{},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["findone",{"_index":418,"title":{},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["findone(@param('id",{"_index":467,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["findone(id",{"_index":429,"title":{},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["finduserorthrow",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduserorthrow(mail",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('credentials",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":568,"title":{},"body":{"index.html":{}}}],["function",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["functions",{"_index":561,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["generator",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["get(':id",{"_index":466,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["get(':id')@apiokresponse({type",{"_index":430,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["get('google",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(googleoauthguard",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/callback')@useguards(googleoauthguard",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('health",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["get('mail/:adress",{"_index":439,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["get('user",{"_index":464,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["get()@apicreatedresponse({type",{"_index":426,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["getcurrentuser",{"_index":419,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["getcurrentuser(@getuser",{"_index":465,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["getcurrentuser(user",{"_index":432,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["gethealthcheck",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrequest",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gets",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["getting",{"_index":564,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":454,"title":{},"body":{"controllers/MockEntityController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["gmail",{"_index":379,"title":{},"body":{"injectables/MailService.html":{}}}],["google",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["googleauthcallback",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(@req",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(req",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleoauthguard",{"_index":114,"title":{"injectables/GoogleOauthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleOauthGuard.html":{},"coverage.html":{}}}],["googlesignin",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlesignin(mail",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlesignup",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlesignup(mail",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlestrategy",{"_index":167,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["grow",{"_index":599,"title":{},"body":{"index.html":{}}}],["guard",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["hash",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthy",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":75,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["httpcode",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('signin",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":615,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"classes/User-1.html":{}}}],["identifier",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["incorrect",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["info.response",{"_index":389,"title":{},"body":{"injectables/MailService.html":{}}}],["inject",{"_index":319,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["injectable",{"_index":71,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/MockEntityService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/MockEntityService.html":{},"coverage.html":{}}}],["injectables",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/MockEntityService.html":{},"overview.html":{}}}],["injection",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["install",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["installation",{"_index":578,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":580,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["isarray",{"_index":427,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["isemail",{"_index":161,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateMockEntityDto.html":{}}}],["isemail()@isnotempty",{"_index":295,"title":{},"body":{"classes/CreateMockEntityDto.html":{}}}],["isglobal",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":162,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateMockEntityDto.html":{}}}],["isnotempty()@isemail",{"_index":157,"title":{},"body":{"classes/AuthDto.html":{}}}],["isnotempty()@isstring",{"_index":159,"title":{},"body":{"classes/AuthDto.html":{}}}],["isstring",{"_index":163,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateMockEntityDto.html":{}}}],["isstring()@isnotempty()@minlength(5",{"_index":297,"title":{},"body":{"classes/CreateMockEntityDto.html":{}}}],["join",{"_index":606,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":349,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":344,"title":{"classes/JwtGuard.html":{}},"body":{"classes/JwtGuard.html":{},"controllers/MockEntityController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwts",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":168,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":612,"title":{},"body":{"index.html":{}}}],["latest",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["legend",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"overview.html":{}}}],["license",{"_index":618,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":596,"title":{},"body":{"index.html":{}}}],["line",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["literal",{"_index":353,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["mail",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["mail.service",{"_index":367,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["mail/mail.service",{"_index":453,"title":{},"body":{"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{}}}],["mailmodule",{"_index":49,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailoptions",{"_index":383,"title":{},"body":{"injectables/MailService.html":{}}}],["mailserive",{"_index":459,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["mailservice",{"_index":365,"title":{"injectables/MailService.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":508,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["minlength",{"_index":299,"title":{},"body":{"classes/CreateMockEntityDto.html":{}}}],["minlength(5",{"_index":300,"title":{},"body":{"classes/CreateMockEntityDto.html":{}}}],["miscellaneous",{"_index":560,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":595,"title":{},"body":{"index.html":{}}}],["mock",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateMockEntityDto.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"classes/UpdateMockEntityDto.html":{},"coverage.html":{}}}],["mock_entity",{"_index":397,"title":{},"body":{"classes/MockEntity.html":{},"classes/User.html":{}}}],["mockentity",{"_index":393,"title":{"classes/MockEntity.html":{},"classes/MockEntity-1.html":{}},"body":{"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockentitycontroller",{"_index":413,"title":{"controllers/MockEntityController.html":{}},"body":{"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"coverage.html":{}}}],["mockentitymodule",{"_index":50,"title":{"modules/MockEntityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MockEntityModule.html":{},"modules.html":{},"overview.html":{}}}],["mockentityservice",{"_index":447,"title":{"injectables/MockEntityService.html":{}},"body":{"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"coverage.html":{},"overview.html":{}}}],["mode",{"_index":586,"title":{},"body":{"index.html":{}}}],["module",{"_index":36,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"overview.html":{}}}],["modules",{"_index":38,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":608,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":613,"title":{},"body":{"index.html":{}}}],["name",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["name.familyname",{"_index":340,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":339,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["namespace",{"_index":399,"title":{},"body":{"classes/MockEntity.html":{},"classes/User.html":{}}}],["nest",{"_index":575,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":617,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MockEntityService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":497,"title":{},"body":{"classes/UpdateMockEntityDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":306,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"classes/User-1.html":{},"dependencies.html":{}}}],["new",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["node.js",{"_index":567,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":376,"title":{},"body":{"injectables/MailService.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":378,"title":{},"body":{"injectables/MailService.html":{}}}],["nodemailer.transporter",{"_index":375,"title":{},"body":{"injectables/MailService.html":{}}}],["notfoundexception",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["notfoundexception('user",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":543,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["number",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"classes/User-1.html":{}}}],["oauth.guard.ts",{"_index":302,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"coverage.html":{}}}],["oauth2",{"_index":324,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["open",{"_index":597,"title":{},"body":{"index.html":{}}}],["optional",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"classes/User-1.html":{}}}],["out",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"overview.html":{}}}],["overview",{"_index":622,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["package",{"_index":525,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MockEntityController.html":{}}}],["param('id",{"_index":472,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["parseintpipe",{"_index":446,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["partialtype",{"_index":496,"title":{},"body":{"classes/UpdateMockEntityDto.html":{}}}],["partialtype(createmockentitydto",{"_index":495,"title":{},"body":{"classes/UpdateMockEntityDto.html":{}}}],["pass",{"_index":381,"title":{},"body":{"injectables/MailService.html":{}}}],["passport",{"_index":323,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":321,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":308,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":156,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{}}}],["passwordhash",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"classes/User-1.html":{}}}],["patch",{"_index":445,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["patch(':id",{"_index":471,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["patch(':id')@apiokresponse({type",{"_index":443,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["payload",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["photos",{"_index":335,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":342,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picture",{"_index":341,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pipeline",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["post",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MockEntityController.html":{}}}],["post('signin",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apicreatedresponse({type",{"_index":423,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["prefix",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MockEntityController.html":{}}}],["prisma",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MockEntityService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["prisma/.../seed.ts",{"_index":563,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["prisma/client/runtime/library",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma/seed.ts",{"_index":507,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prismaclientknownrequesterror",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismamodel",{"_index":400,"title":{},"body":{"classes/MockEntity.html":{},"controllers/MockEntityController.html":{},"classes/User.html":{}}}],["prismamodel.mockentity",{"_index":460,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["prismamodel.user",{"_index":463,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["prismamodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["prismamodule.forroot",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaservice",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MockEntityService.html":{}}}],["private",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/MockEntityController.html":{}}}],["production",{"_index":588,"title":{},"body":{"index.html":{}}}],["profile",{"_index":314,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["progressive",{"_index":566,"title":{},"body":{"index.html":{}}}],["project",{"_index":598,"title":{},"body":{"index.html":{}}}],["promise",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["properties",{"_index":154,"title":{"properties.html":{}},"body":{"classes/AuthDto.html":{},"classes/CreateMockEntityDto.html":{},"injectables/MailService.html":{},"classes/MockEntity-1.html":{},"classes/User-1.html":{},"properties.html":{}}}],["provided",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["provider",{"_index":336,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["providerid",{"_index":337,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"overview.html":{}}}],["public",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["pwmatches",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":607,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/MockEntityController.html":{}}}],["reason",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["regarding",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":420,"title":{},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["remove(@param('id",{"_index":474,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["remove(id",{"_index":436,"title":{},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["repository",{"_index":577,"title":{},"body":{"index.html":{}}}],["req",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["reset",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"overview.html":{}}}],["response",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["results",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["run",{"_index":583,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":571,"title":{},"body":{"index.html":{}}}],["scope",{"_index":333,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["searches",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":358,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sendtestmail",{"_index":370,"title":{},"body":{"injectables/MailService.html":{},"controllers/MockEntityController.html":{}}}],["sendtestmail(@param('adress",{"_index":476,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["sendtestmail(adress",{"_index":372,"title":{},"body":{"injectables/MailService.html":{},"controllers/MockEntityController.html":{}}}],["sent",{"_index":388,"title":{},"body":{"injectables/MailService.html":{}}}],["server",{"_index":572,"title":{},"body":{"index.html":{}}}],["service",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["services",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":573,"title":{},"body":{"index.html":{}}}],["sign",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["signed",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(dto",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signs",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["signtoken",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["signtoken(userid",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(dto",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleOauthGuard.html":{},"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"classes/User.html":{},"classes/User-1.html":{},"index.html":{}}}],["sponsors",{"_index":601,"title":{},"body":{"index.html":{}}}],["src/.../access_token.type.ts",{"_index":632,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../get",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":562,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/_gen/prisma",{"_index":394,"title":{},"body":{"classes/MockEntity.html":{},"classes/MockEntity-1.html":{},"classes/User.html":{},"classes/User-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":73,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":74,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:102",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:116",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:142",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:164",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:69",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorator/get",{"_index":518,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":153,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:6",{"_index":158,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:9",{"_index":160,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/guard/google",{"_index":301,"title":{},"body":{"injectables/GoogleOauthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/jwt.guard.ts",{"_index":345,"title":{},"body":{"classes/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/guard/jwt.guard.ts:3",{"_index":347,"title":{},"body":{"classes/JwtGuard.html":{}}}],["src/auth/strategies/google.strategy.ts",{"_index":307,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts:17",{"_index":317,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:7",{"_index":311,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":348,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:19",{"_index":354,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:8",{"_index":351,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/types/access_token.type.ts",{"_index":633,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/mail/mail.module.ts",{"_index":366,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service.ts",{"_index":368,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:19",{"_index":373,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:7",{"_index":371,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":520,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/mock",{"_index":292,"title":{},"body":{"classes/CreateMockEntityDto.html":{},"controllers/MockEntityController.html":{},"modules/MockEntityModule.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"coverage.html":{}}}],["start",{"_index":584,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":587,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":589,"title":{},"body":{"index.html":{}}}],["started",{"_index":565,"title":{"index.html":{}},"body":{}}],["starter",{"_index":576,"title":{},"body":{"index.html":{}}}],["statements",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["stay",{"_index":609,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":322,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["string",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["subject",{"_index":384,"title":{},"body":{"injectables/MailService.html":{}}}],["successfully",{"_index":390,"title":{},"body":{"injectables/MailService.html":{}}}],["super",{"_index":326,"title":{},"body":{"injectables/GoogleStrategy.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":602,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":620,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["switchtohttp",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["takes",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":404,"title":{},"body":{"classes/MockEntity-1.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":594,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":593,"title":{},"body":{"index.html":{}}}],["tests",{"_index":591,"title":{},"body":{"index.html":{}}}],["text",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/MailService.html":{}}}],["thanks",{"_index":600,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.googlesignin(req.user.email",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.googlesignup(req.user.email",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(dto",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(dto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config.get('gmail_mail",{"_index":380,"title":{},"body":{"injectables/MailService.html":{}}}],["this.config.get('gmail_password",{"_index":382,"title":{},"body":{"injectables/MailService.html":{}}}],["this.config.get('jwt_secret",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createuserorthrow(dto.email",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.createuserorthrow(mail",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.finduserorthrow(dto.email",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.finduserorthrow(mail",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailserive.sendtestmail(adress",{"_index":477,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["this.mockentityservice.create(createmockentitydto",{"_index":470,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["this.mockentityservice.findall",{"_index":461,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["this.mockentityservice.findone(id",{"_index":468,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["this.mockentityservice.remove(id",{"_index":475,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["this.mockentityservice.update(id",{"_index":473,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["this.prisma.user.finduniqueorthrow",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.prismaservice.mockentity.create",{"_index":489,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["this.prismaservice.mockentity.delete",{"_index":493,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["this.prismaservice.mockentity.findmany",{"_index":490,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["this.prismaservice.mockentity.finduniqueorthrow",{"_index":491,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["this.prismaservice.mockentity.update",{"_index":492,"title":{},"body":{"injectables/MockEntityService.html":{}}}],["this.prismaservice.user.create",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.findunique",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.transporter",{"_index":377,"title":{},"body":{"injectables/MailService.html":{}}}],["this.transporter.sendmail(mailoptions",{"_index":386,"title":{},"body":{"injectables/MailService.html":{}}}],["throw",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["throws",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":610,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["transporter",{"_index":369,"title":{},"body":{"injectables/MailService.html":{}}}],["true",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"controllers/MockEntityController.html":{}}}],["try",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["twitter",{"_index":616,"title":{},"body":{"index.html":{}}}],["type",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/CreateMockEntityDto.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/MockEntity-1.html":{},"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"classes/User-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":630,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateMockEntityDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["ui",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":424,"title":{},"body":{"controllers/MockEntityController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@get('user",{"_index":434,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["unit",{"_index":590,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{}}}],["unlicensed",{"_index":629,"title":{},"body":{"properties.html":{}}}],["up",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["update",{"_index":421,"title":{},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["update(id",{"_index":441,"title":{},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{}}}],["updatemockentitydto",{"_index":442,"title":{"classes/UpdateMockEntityDto.html":{}},"body":{"controllers/MockEntityController.html":{},"injectables/MockEntityService.html":{},"classes/UpdateMockEntityDto.html":{},"coverage.html":{}}}],["useguards",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MockEntityController.html":{}}}],["useguards(googleoauthguard",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtguard",{"_index":462,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["useguards(jwtguard)@apibearerauth()@apiokresponse({type",{"_index":433,"title":{},"body":{"controllers/MockEntityController.html":{}}}],["user",{"_index":141,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"classes/MockEntity.html":{},"controllers/MockEntityController.html":{},"classes/User.html":{},"classes/User-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.decorator.ts",{"_index":519,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.passwordhash",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userid",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":309,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(_accesstoken",{"_index":312,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":352,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":164,"title":{},"body":{"classes/AuthDto.html":{},"classes/CreateMockEntityDto.html":{},"dependencies.html":{}}}],["value",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":511,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":634,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifycallback",{"_index":316,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["version",{"_index":627,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":585,"title":{},"body":{"index.html":{}}}],["website",{"_index":614,"title":{},"body":{"index.html":{}}}],["world",{"_index":76,"title":{},"body":{"injectables/AppService.html":{}}}],["written",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["wrong",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["yes",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":605,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MockEntityModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHealthCheck\n                            \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHealthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: number; text: string; }\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('health')\n  getHealthCheck() {\n    return { status: 200, text: 'Healthy' };\n  }\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMockEntityModule\n\nMockEntityModule\n\nAppModule -->\n\nMockEntityModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MockEntityModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaModule } from 'nestjs-prisma';\nimport { MockEntityModule } from './mock-entity/mock-entity.module';\nimport { MailModule } from './mail/mail.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    PrismaModule.forRoot({\n      isGlobal: true,\n    }),\n    MockEntityModule,\n    MailModule,\n    ConfigModule.forRoot({ isGlobal: true }),\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                auth\n                            \n                            \n                                    \n                                    \n                                    Async\n                                googleAuthCallback\n                            \n                            \n                                    \n                                    \n                                signin\n                            \n                            \n                                    \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        auth\n                        \n                    \n                \n            \n            \n                \n                        \n                    auth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(GoogleOauthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleAuthCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleAuthCallback(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/callback')@UseGuards(GoogleOauthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(dto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('signin')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            AuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(dto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            AuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  NotFoundException,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthDto } from './dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { GoogleOauthGuard } from './guard';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('signup')\n  signup(@Body() dto: AuthDto) {\n    return this.authService.signup(dto);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('signin')\n  signin(@Body() dto: AuthDto) {\n    return this.authService.signin(dto);\n  }\n\n  @Get('google')\n  @UseGuards(GoogleOauthGuard)\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async auth() {}\n\n  @Get('google/callback')\n  @UseGuards(GoogleOauthGuard)\n  async googleAuthCallback(@Req() req) {\n    console.log(req.user);\n\n    //please add type here\n    const user = req.user;\n\n    let response;\n\n    try {\n      response = await this.authService.googleSignIn(req.user.email);\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        response = await this.authService.googleSignup(req.user.email);\n      } else {\n        throw error;\n      }\n    }\n\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthDto {\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy, GoogleStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, GoogleStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is the service regarding user auth.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createUserOrThrow\n                            \n                            \n                                    Private\n                                    Async\n                                findUserOrThrow\n                            \n                            \n                                    Async\n                                googleSignIn\n                            \n                            \n                                    Async\n                                googleSignup\n                            \n                            \n                                    Async\n                                signin\n                            \n                            \n                                    Async\n                                signToken\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService, config: ConfigService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:22\n                            \n                        \n\n                \n                    \n                            This function creates an AuthService and takes all required services for dependency injection.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The service to access prisma.\n\n                                                        \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The service to access .env files\n\n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The service to sign JWTs.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        createUserOrThrow\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUserOrThrow(mail: string, passwordhash?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:164\n                        \n                    \n\n\n            \n                \n                        This function creates a user in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe mail of the user\n\n\n                                            \n                                        \n                                        \n                                                passwordhash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe hash of the password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe created user\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        findUserOrThrow\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserOrThrow(mail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:142\n                        \n                    \n\n\n            \n                \n                        This function searches the database for a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe mail of the user to find\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \nThe found user\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        googleSignIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleSignIn(mail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:87\n                        \n                    \n\n\n            \n                \n                        With this function, a user that has signed in with google gets his access_token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe mail of the google user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nPromise with the signed access token\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        googleSignup\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleSignup(mail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:102\n                        \n                    \n\n\n            \n                \n                        With this function, a user that has signed up with google gets his access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                mail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe mail of the google user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nPromise with the signed access token\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(dto: AuthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:47\n                        \n                    \n\n\n            \n                \n                        With this function, the user can sign in and get a signed access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            AuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO that contains the user's auth details\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nPromise with the signed access token\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:116\n                        \n                    \n\n\n            \n                \n                        This function creates a token and signs it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the user to sign.\n\n\n                                            \n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email that is written in the access token\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nThe signed access_token\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(dto: AuthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:69\n                        \n                    \n\n\n            \n                \n                        With this function, the user can sign up and get a signed access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            AuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe DTO that contains the user's auth details\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \nPromise with the signed access token\n\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { AuthDto } from './dto';\nimport { PrismaService } from 'nestjs-prisma';\nimport * as argon from 'argon2';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from '@prisma/client';\nimport { AccessTokenType } from './types';\n\n/**\n * This is the service regarding user auth.\n *\n * @public\n */\n@Injectable()\nexport class AuthService {\n\n  /**\n   * This function creates an AuthService and takes all required services for dependency injection.\n   * \n   * @param prismaService The service to access prisma.\n   * @param config The service to access .env files\n   * @param jwtService The service to sign JWTs.\n   */\n  constructor(\n    private readonly prismaService: PrismaService,\n    private readonly config: ConfigService,\n    private readonly jwtService: JwtService,\n  ) { }\n\n  /**\n   * With this function, the user can sign in and get a signed access token.\n   *\n   * @param {AuthDto} dto - The DTO that contains the user's auth details\n   *\n   * @returns {Promise} - Promise with the signed access token\n   *\n   * @throws {ForbiddenException} - If the provided credentials are wrong\n   * @throws {NotFoundException} - If the user was not found by mail\n   */\n  async signin(dto: AuthDto): Promise {\n    const user: User = await this.findUserOrThrow(dto.email);\n\n    // compare password\n    const pwMatches: boolean = await argon.verify(\n      user.passwordHash,\n      dto.password,\n    );\n    // if password incorrect throw exception\n    if (!pwMatches) throw new ForbiddenException('Credentials incorrect');\n    return this.signToken(user.id, user.email);\n  }\n\n  /**\n   * With this function, the user can sign up and get a signed access token.\n   *\n   * @param {AuthDto} dto - The DTO that contains the user's auth details\n   *\n   * @returns {Promise} - Promise with the signed access token\n   *\n   * @throws {ForbiddenException} - If the mail is already taken\n   */\n  async signup(dto: AuthDto): Promise {\n    // generate the password hash\n    const hash: string = await argon.hash(dto.password);\n\n    const user: User = await this.createUserOrThrow(dto.email, hash);\n\n    return this.signToken(user.id, user.email);\n  }\n\n  /**\n   * With this function, a user that has signed in with google gets his access_token.\n   * \n   * @param {string} mail - The mail of the google user\n   * \n   * @returns {Promise} - Promise with the signed access token\n   * \n   * @throws {NotFoundException} - If the user was not found by mail\n   */\n  async googleSignIn(mail: string): Promise {\n    const user: User = await this.findUserOrThrow(mail);\n\n    return this.signToken(user.id, user.email);\n  }\n\n  /**\n   * \n   * With this function, a user that has signed up with google gets his access token.\n   * \n   * @param {string} mail - The mail of the google user\n   * @returns {Promise} - Promise with the signed access token\n   * \n   * @throws {ForbiddenException} - If a user with the given mail already exists.\n   */\n  async googleSignup(mail: string): Promise {\n    const user: User = await this.createUserOrThrow(mail);\n\n    return this.signToken(user.id, user.email);\n  }\n\n  /**\n   * \n   * This function creates a token and signs it.\n   * \n   * @param {string} userId - The id of the user to sign.\n   * @param {string} email - The email that is written in the access token\n   * @returns {Promise} - The signed access_token\n   */\n  async signToken(userId: number, email: string): Promise {\n    const payload = {\n      sub: userId,\n      email,\n    };\n\n    const secret: string = this.config.get('JWT_SECRET');\n\n    const token: string = await this.jwtService.signAsync(payload, {\n      expiresIn: '15m',\n      secret: secret,\n    });\n\n    return {\n      access_token: token,\n    };\n  }\n\n  /**\n   * This function searches the database for a user.\n   * \n   * @param {string} mail - The mail of the user to find\n   * @returns {Promise} - The found user\n   * \n   * @throws {NotFoundException} - If the user is not found\n   */\n  private async findUserOrThrow(mail: string): Promise {\n    // find the user by email\n    const user: User = await this.prismaService.user.findUnique({\n      where: {\n        email: mail,\n      },\n    });\n\n    // if user does not exist throw exception\n    if (!user) throw new NotFoundException('User not found');\n\n    return user;\n  }\n\n  /**\n   * This function creates a user in the database.\n   * @param {string} mail - The mail of the user\n   * @param {string} passwordhash - The hash of the password\n   * @returns {Promise} - The created user\n   * \n   * @throws {ForbiddenException} - If the credentials are already taken\n   */\n  private async createUserOrThrow(\n    mail: string,\n    passwordhash?: string,\n  ): Promise {\n    // save the new user in the db\n    try {\n      const user = await this.prismaService.user.create({\n        data: {\n          email: mail,\n          passwordHash: passwordhash,\n        },\n      });\n\n      return user;\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        if (error.code === 'P2002') {\n          throw new ForbiddenException('Credentials taken');\n        }\n      }\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMockEntityDto.html":{"url":"classes/CreateMockEntityDto.html","title":"class - CreateMockEntityDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMockEntityDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mock-entity/dto/create-mock-entity.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mock-entity/dto/create-mock-entity.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mock-entity/dto/create-mock-entity.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class CreateMockEntityDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleOauthGuard.html":{"url":"injectables/GoogleOauthGuard.html","title":"injectable - GoogleOauthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleOauthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/google-oauth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('google')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GoogleOauthGuard extends AuthGuard('google') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'google')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/google.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth2';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(readonly configService: ConfigService) {\n    super({\n      clientID: configService.get('clientID'),\n      clientSecret: configService.get('clientSecret'),\n      callbackURL: configService.get('callbackURL'),\n      scope: ['profile', 'email'],\n    });\n  }\n\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    const { id, name, emails, photos } = profile;\n\n    const user = {\n      provider: 'google',\n      providerId: id,\n      email: emails[0].value,\n      name: `${name.givenName} ${name.familyName}`,\n      picture: photos[0].value,\n    };\n\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtGuard.html":{"url":"classes/JwtGuard.html","title":"class - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/jwt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class JwtGuard extends AuthGuard('jwt') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { PrismaService } from 'nestjs-prisma';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    config: ConfigService,\n    private readonly prisma: PrismaService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: { sub: number; email: string }) {\n    const user = await this.prisma.user.findUniqueOrThrow({\n      where: {\n        id: payload.sub,\n      },\n    });\n\n    delete user.passwordHash;\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService\n\nMailService\n\n\n\nMailModule\n\nMailModule\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\n\n@Module({\n  providers: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendTestMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendTestMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendTestMail(adress: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     nodemailer.Transporter\n\n                    \n                \n                    \n                        \n                                Defined in src/mail/mail.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as nodemailer from 'nodemailer';\n\n@Injectable()\nexport class MailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor(private readonly config: ConfigService) {\n    this.transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: this.config.get('GMAIL_MAIL'),\n        pass: this.config.get('GMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  async sendTestMail(adress: string) {\n    const mailOptions = {\n      from: this.config.get('GMAIL_MAIL'),\n      to: adress,\n      subject: 'CashCompass',\n      text: 'This is an Email from the cashcompass',\n    };\n\n    try {\n      const info = await this.transporter.sendMail(mailOptions);\n      console.log('Email sent: ' + info.response);\n      return 'Mail sent successfully';\n    } catch (error) {\n      console.log(error);\n      return error.message;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockEntity.html":{"url":"classes/MockEntity.html","title":"class - MockEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/_gen/prisma-class/index.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MockEntity as _MockEntity } from './mock_entity';\nimport { User as _User } from './user';\n\nexport namespace PrismaModel {\n  export class MockEntity extends _MockEntity {}\n  export class User extends _User {}\n\n  export const extraModels = [MockEntity, User];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockEntity-1.html":{"url":"classes/MockEntity-1.html","title":"class - MockEntity-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/_gen/prisma-class/mock_entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/_gen/prisma-class/mock_entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/_gen/prisma-class/mock_entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/_gen/prisma-class/mock_entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        test\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/_gen/prisma-class/mock_entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class MockEntity {\n  @ApiProperty({ type: Number })\n  id: number;\n\n  @ApiProperty({ type: String })\n  email: string;\n\n  @ApiPropertyOptional({ type: String })\n  name?: string;\n\n  @ApiPropertyOptional({ type: String })\n  test?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MockEntityController.html":{"url":"controllers/MockEntityController.html","title":"controller - MockEntityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MockEntityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mock-entity/mock-entity.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mock-entity\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                getCurrentUser\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                sendTestMail\n                            \n                            \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMockEntityDto: CreateMockEntityDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCreatedResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMockEntityDto\n                                            \n                                                            CreateMockEntityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiCreatedResponse({type: undefined, isArray: true})\n                \n            \n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCurrentUser(user: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@ApiBearerAuth()@ApiOkResponse({type: undefined})@Get('user')\n                \n            \n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sendTestMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendTestMail(adress: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('mail/:adress')\n                \n            \n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateMockEntityDto: UpdateMockEntityDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOkResponse({type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateMockEntityDto\n                                            \n                                                            UpdateMockEntityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseIntPipe,\n  UseGuards,\n} from '@nestjs/common';\nimport { MockEntityService } from './mock-entity.service';\nimport { CreateMockEntityDto, UpdateMockEntityDto } from './dto';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { PrismaModel } from '../_gen/prisma-class';\nimport { MailService } from '../mail/mail.service';\nimport { GetUser } from '../auth/decorator';\nimport { JwtGuard } from '../auth/guard';\n\n@Controller('mock-entity')\n@ApiTags('mock-entity')\nexport class MockEntityController {\n  constructor(\n    private readonly mockEntityService: MockEntityService,\n    private readonly mailSerive: MailService,\n  ) {}\n\n  @Get()\n  @ApiCreatedResponse({ type: PrismaModel.MockEntity, isArray: true })\n  findAll() {\n    return this.mockEntityService.findAll();\n  }\n\n  @UseGuards(JwtGuard)\n  @ApiBearerAuth()\n  @ApiOkResponse({ type: PrismaModel.User })\n  @Get('user')\n  getCurrentUser(@GetUser() user: any) {\n    return user;\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ type: PrismaModel.MockEntity })\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.mockEntityService.findOne(id);\n  }\n\n  @Post()\n  @ApiCreatedResponse({ type: PrismaModel.MockEntity })\n  create(@Body() createMockEntityDto: CreateMockEntityDto) {\n    return this.mockEntityService.create(createMockEntityDto);\n  }\n\n  @Patch(':id')\n  @ApiOkResponse({ type: PrismaModel.MockEntity })\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateMockEntityDto: UpdateMockEntityDto,\n  ) {\n    return this.mockEntityService.update(id, updateMockEntityDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.mockEntityService.remove(id);\n  }\n\n  @Get('mail/:adress')\n  sendTestMail(@Param('adress') adress: string) {\n    return this.mailSerive.sendTestMail(adress);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MockEntityModule.html":{"url":"modules/MockEntityModule.html","title":"module - MockEntityModule","body":"\n                   \n\n\n\n\n    Modules\n    MockEntityModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MockEntityModule\n\n\n\ncluster_MockEntityModule_providers\n\n\n\n\nMailService\n\nMailService\n\n\n\nMockEntityModule\n\nMockEntityModule\n\nMockEntityModule -->\n\nMailService->MockEntityModule\n\n\n\n\n\nMockEntityService\n\nMockEntityService\n\nMockEntityModule -->\n\nMockEntityService->MockEntityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mock-entity/mock-entity.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                        \n                            MockEntityService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MockEntityController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MockEntityService } from './mock-entity.service';\nimport { MockEntityController } from './mock-entity.controller';\nimport { MailService } from '../mail/mail.service';\n\n@Module({\n  controllers: [MockEntityController],\n  providers: [MockEntityService, MailService],\n})\nexport class MockEntityModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MockEntityService.html":{"url":"injectables/MockEntityService.html","title":"injectable - MockEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MockEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mock-entity/mock-entity.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/mock-entity/mock-entity.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                    PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createMockEntityDto: CreateMockEntityDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMockEntityDto\n                                            \n                                                            CreateMockEntityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateMockEntityDto: UpdateMockEntityDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mock-entity/mock-entity.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateMockEntityDto\n                                            \n                                                            UpdateMockEntityDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMockEntityDto, UpdateMockEntityDto } from './dto';\nimport { PrismaService } from 'nestjs-prisma';\n\n@Injectable()\nexport class MockEntityService {\n  constructor(private prismaService: PrismaService) {}\n\n  create(createMockEntityDto: CreateMockEntityDto) {\n    return this.prismaService.mockEntity.create({\n      data: {\n        ...createMockEntityDto,\n      },\n    });\n  }\n\n  findAll() {\n    return this.prismaService.mockEntity.findMany();\n  }\n\n  findOne(id: number) {\n    return this.prismaService.mockEntity.findUniqueOrThrow({\n      where: {\n        id,\n      },\n    });\n  }\n\n  update(id: number, updateMockEntityDto: UpdateMockEntityDto) {\n    return this.prismaService.mockEntity.update({\n      data: updateMockEntityDto,\n      where: {\n        id,\n      },\n    });\n  }\n\n  remove(id: number) {\n    return this.prismaService.mockEntity.delete({\n      where: {\n        id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMockEntityDto.html":{"url":"classes/UpdateMockEntityDto.html","title":"class - UpdateMockEntityDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMockEntityDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mock-entity/dto/update-mock-entity.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateMockEntityDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMockEntityDto } from './create-mock-entity.dto';\n\nexport class UpdateMockEntityDto extends PartialType(CreateMockEntityDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/_gen/prisma-class/index.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MockEntity as _MockEntity } from './mock_entity';\nimport { User as _User } from './user';\n\nexport namespace PrismaModel {\n  export class MockEntity extends _MockEntity {}\n  export class User extends _User {}\n\n  export const extraModels = [MockEntity, User];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/_gen/prisma-class/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                passwordHash\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/_gen/prisma-class/user.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/_gen/prisma-class/user.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        passwordHash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/_gen/prisma-class/user.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class User {\n  @ApiProperty({ type: Number })\n  id: number;\n\n  @ApiProperty({ type: String })\n  email: string;\n\n  @ApiPropertyOptional({ type: String })\n  passwordHash?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/_gen/prisma-class/index.ts\n            \n            class\n            MockEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/_gen/prisma-class/index.ts\n            \n            class\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/_gen/prisma-class/index.ts\n            \n            variable\n            extraModels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/_gen/prisma-class/mock_entity.ts\n            \n            class\n            MockEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/_gen/prisma-class/user.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/auth/decorator/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/google-oauth.guard.ts\n            \n            injectable\n            GoogleOauthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt.guard.ts\n            \n            class\n            JwtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mock-entity/dto/create-mock-entity.dto.ts\n            \n            class\n            CreateMockEntityDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mock-entity/dto/update-mock-entity.dto.ts\n            \n            class\n            UpdateMockEntityDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mock-entity/mock-entity.controller.ts\n            \n            controller\n            MockEntityController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/mock-entity/mock-entity.service.ts\n            \n            injectable\n            MockEntityService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.14\n        \n            @prisma/client : latest\n        \n            argon2 : ^0.31.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            install : ^0.13.0\n        \n            nestjs-prisma : ^0.22.0\n        \n            nodemailer : ^6.9.7\n        \n            npm : ^10.2.3\n        \n            passport : ^0.6.0\n        \n            passport-google-oauth2 : ^0.2.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            prisma-class-generator : ^0.2.8\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MockEntityModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MockEntityModule\n\n\n\ncluster_MockEntityModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMockEntityModule\n\nMockEntityModule\n\nAppModule -->\n\nMockEntityModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\nMockEntityModule -->\n\nMailService->MockEntityModule\n\n\n\n\n\nMockEntityService\n\nMockEntityService\n\nMockEntityModule -->\n\nMockEntityService->MockEntityModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccessTokenType   (src/.../access_token.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/types/access_token.type.ts\n    \n    \n        \n            \n                \n                    \n                    AccessTokenType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            extraModels   (src/.../index.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/_gen/prisma-class/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        extraModels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [MockEntity, User]\n                    \n                \n\n\n        \n    \n\n    src/auth/decorator/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, ctx: ExecutionContext) => {\n    //come back to this as this fails the test in the pipeline for some reason\n    const request: any = ctx.switchToHttp().getRequest();\n    // const request: Express.Request = ctx\n    //     .switchToHttp()\n    //     .getRequest();\n    if (data) {\n      return request.user[data];\n    }\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
